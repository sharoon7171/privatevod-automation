---
description: Chrome Extension Development - Manifest V3, Modern JavaScript, Latest Standards
globs:
alwaysApply: true
priority: critical
---

# Chrome Extension Development Rules - Professional Standards

## Core Development Philosophy
- **Manifest V3 ONLY** - No legacy Manifest V2 code
- **Service Workers** instead of background pages
- **ES Modules (.mjs)** for all JavaScript files
- **Modern Web APIs** - use latest Chrome extension APIs
- **Security-first approach** - minimal permissions, CSP compliance
- **Performance-optimized** - lazy loading, efficient memory usage

## Project Organization
- **Use @ultra-modular-project-structure** for detailed architecture guidance
- **Component hierarchy** - components separated by complexity level
- **Single file per component** - no mixing of responsibilities

## Manifest V3 Requirements
- Always use `"manifest_version": 3`
- Use `service_worker` for background scripts
- Implement `action` instead of `browser_action`
- Use `host_permissions` instead of `permissions` for sites
- Follow Content Security Policy v3 rules

## Code Standards
- **Follow @ultra-modular-project-structure** - for naming conventions
- **Use @codebase-analysis-agent** - for thorough analysis and implementation
- **Async/await only** - no callbacks or .then() chains
- **Comprehensive error handling** - with custom error classes

## Chrome APIs - Latest Approaches
```javascript
// âœ… Modern Chrome APIs Usage
import { chrome } from 'chrome://global/';

// Storage API (sync/local) - See @javascript-mjs-standards for detailed examples
await chrome.storage.sync.set({ key: value });
const result = await chrome.storage.sync.get(['key']);

// Messaging API
await chrome.runtime.sendMessage({ action: 'getData' });
await chrome.tabs.sendMessage(tabId, { type: 'UPDATE_UI' });

// Action API (replaces browserAction)
await chrome.action.setTitle({ title: 'New Title' });
await chrome.action.setBadgeText({ text: '5' });
```

## Performance Standards
- **See @javascript-mjs-standards** - for detailed performance patterns
- **Lazy load modules** - import only when needed
- **Cache API responses** - use chrome.storage for caching

## Security Requirements
- **Minimal permissions** - request only what's absolutely needed
- **CSP v3 compliance** - no inline scripts, use hash/nonce
- **Sanitize all inputs** - prevent XSS attacks
- **Validate all messages** - between content scripts and background
- **Use HTTPS** - for all external API calls

## Code Quality Standards
- **TypeScript JSDoc** - document all functions with types
- **ESLint + Prettier** - enforce consistent formatting
- **Unit tests** - test all utility functions
- **Error logging** - comprehensive error tracking
- **Version control** - semantic versioning for releases